openapi: 3.1.0
info:
  title: ListingsAPI
  description: The Listings API
  contact:
    name: AVIV
  version: '1.0'
servers:
  - url: /api
    description: The Listings API
tags:
  - name: listings
    description: Listings operations
paths:
  /listings:
    get:
      summary: Get all listings
      description: Get all the listings registered in the app.
      tags:
        - listings
      operationId: get-listings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListingIdentifier'
                  - $ref: '#/components/schemas/Listing'
    post:
      summary: Create a listing
      description: Create a listing.
      operationId: post-listings
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListingIdentifier'
                  - $ref: '#/components/schemas/Listing'
  '/listings/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The id for the listing to get price history from.
    put:
      summary: Update a listing
      description: Update a listing described by its identifier.
      tags:
        - listings
      operationId: upsert-listing
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListingIdentifier'
                  - $ref: '#/components/schemas/Listing'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Listing'
  '/listings/{id}/history':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The id for the listing to get price history from.
    get:
      summary: Get listing price history
      description: Get the price history of a listing
      tags:
        - listings
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
      operationId: get-listing-price-history
components:
  schemas:
    ListingIdentifier:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          name: Identifier
          description: The listing unique identifier.
          type: integer
          example: 1234
          minimum: 0
    Listing:
      type: object
      required:
        - name
        - postal_address
        - description
        - building_type
        - price
        - surface_area_m2
        - rooms_count
        - bedrooms_count
        - creation_date
        - last_update_date
      additionalProperties: false
      properties:
        name:
          name: Name
          description: A user friendly name for the listing.
          type: string
          minLength: 1
        postal_address:
          $ref: '#/components/schemas/PostalAddress'
        description:
          name: Description
          description: A user friendly description for the listing.
          type: string
          minLength: 1
        building_type:
          name: Building type
          description: The type of building the listing referers to.
          type: string
          enum:
            - STUDIO
            - APARTMENT
            - HOUSE
        price:
          name: Price
          description: The last price of the listing.
          $ref: '#/components/schemas/Price'
        surface_area_m2:
          name: Surface area
          description: 'The surface of the listing, in square meters.'
          type: number
          minimum: 0
          example: 43
        rooms_count:
          name: Rooms count
          description: The number of rooms of the listing.
          type: integer
          minimum: 1
          example: 2
        bedrooms_count:
          name: Bedrooms count
          description: The number of bedrooms of the listing.
          type: integer
          minimum: 0
          example: 1
        contact_phone_number:
          name: Contact phone number
          description: 'Listing main contact phone number, following the E.164 standard.'
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
        creation_date:
          name: Posted date
          description: 'The date at which the listing was produced, following RFC 3339.'
          type: string
          example: '1970-01-01T00:00:00.000Z'
        last_update_date:
          name: Last update date
          description: 'The date at which the listing was last updated, following RFC 3339.'
          type: string
          example: '1970-01-01T00:00:00.000Z'
    Price:
      type: object
      required:
        - price_eur
        - date_posted
      additionalProperties: false
      properties:
        price_eur:
          name: Price
          description: 'A price, expressed in euros.'
          type: integer
          example: 340000
        date_posted:
          name: Date posted
          description: The date at which the price was published.
          type: string
    PostalAddress:
      type: object
      required:
        - street_address
        - postal_code
        - city
        - country
      properties:
        street_address:
          name: Street address
          type: string
          description: The street address of the postal address.
          example: '48, boulevard des capucins'
          minLength: 1
        postal_code:
          name: Postal code
          type: string
          description: The postal code of the postal address.
          example: '10294'
          minLength: 1
        city:
          name: City
          type: string
          description: The city of the postal address.
          example: Paris
          minLength: 1
        country:
          name: Country
          type: string
          description: 'The country of the Postal Address, as a ISO 3166-1 alpha-2 country code.'
          example: FR
          minLength: 2
          maxLength: 2
